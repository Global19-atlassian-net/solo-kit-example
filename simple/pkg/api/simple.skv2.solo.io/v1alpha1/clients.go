// Code generated by skv2. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the simple.skv2.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the simple.skv2.solo.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the simple.skv2.solo.io/v1alpha1/v1alpha1 APIs
	Circles() CircleClient
	// clienset for the simple.skv2.solo.io/v1alpha1/v1alpha1 APIs
	Squares() SquareClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the simple.skv2.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) Circles() CircleClient {
	return NewCircleClient(c.client)
}

// clienset for the simple.skv2.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) Squares() SquareClient {
	return NewSquareClient(c.client)
}

// Reader knows how to read and list Circles.
type CircleReader interface {
	// Get retrieves a Circle for the given object key
	GetCircle(ctx context.Context, key client.ObjectKey) (*Circle, error)

	// List retrieves list of Circles for a given namespace and list options.
	ListCircle(ctx context.Context, opts ...client.ListOption) (*CircleList, error)
}

// Writer knows how to create, delete, and update Circles.
type CircleWriter interface {
	// Create saves the Circle object.
	CreateCircle(ctx context.Context, obj *Circle, opts ...client.CreateOption) error

	// Delete deletes the Circle object.
	DeleteCircle(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Circle object.
	UpdateCircle(ctx context.Context, obj *Circle, opts ...client.UpdateOption) error

	// Patch patches the given Circle object.
	PatchCircle(ctx context.Context, obj *Circle, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Circle objects matching the given options.
	DeleteAllOfCircle(ctx context.Context, opts ...client.DeleteAllOfOption) error
}

// StatusWriter knows how to update status subresource of a Circle object.
type CircleStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Circle object.
	UpdateCircleStatus(ctx context.Context, obj *Circle, opts ...client.UpdateOption) error

	// Patch patches the given Circle object's subresource.
	PatchCircleStatus(ctx context.Context, obj *Circle, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Circles.
type CircleClient interface {
	CircleReader
	CircleWriter
	CircleStatusWriter
}

type circleClient struct {
	client client.Client
}

func NewCircleClient(client client.Client) *circleClient {
	return &circleClient{client: client}
}

func (c *circleClient) GetCircle(ctx context.Context, key client.ObjectKey) (*Circle, error) {
	obj := &Circle{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *circleClient) ListCircle(ctx context.Context, opts ...client.ListOption) (*CircleList, error) {
	list := &CircleList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *circleClient) CreateCircle(ctx context.Context, obj *Circle, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *circleClient) DeleteCircle(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Circle{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *circleClient) UpdateCircle(ctx context.Context, obj *Circle, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *circleClient) PatchCircle(ctx context.Context, obj *Circle, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *circleClient) DeleteAllOfCircle(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Circle{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *circleClient) UpdateCircleStatus(ctx context.Context, obj *Circle, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *circleClient) PatchCircleStatus(ctx context.Context, obj *Circle, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Reader knows how to read and list Squares.
type SquareReader interface {
	// Get retrieves a Square for the given object key
	GetSquare(ctx context.Context, key client.ObjectKey) (*Square, error)

	// List retrieves list of Squares for a given namespace and list options.
	ListSquare(ctx context.Context, opts ...client.ListOption) (*SquareList, error)
}

// Writer knows how to create, delete, and update Squares.
type SquareWriter interface {
	// Create saves the Square object.
	CreateSquare(ctx context.Context, obj *Square, opts ...client.CreateOption) error

	// Delete deletes the Square object.
	DeleteSquare(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Square object.
	UpdateSquare(ctx context.Context, obj *Square, opts ...client.UpdateOption) error

	// Patch patches the given Square object.
	PatchSquare(ctx context.Context, obj *Square, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Square objects matching the given options.
	DeleteAllOfSquare(ctx context.Context, opts ...client.DeleteAllOfOption) error
}

// StatusWriter knows how to update status subresource of a Square object.
type SquareStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Square object.
	UpdateSquareStatus(ctx context.Context, obj *Square, opts ...client.UpdateOption) error

	// Patch patches the given Square object's subresource.
	PatchSquareStatus(ctx context.Context, obj *Square, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on Squares.
type SquareClient interface {
	SquareReader
	SquareWriter
	SquareStatusWriter
}

type squareClient struct {
	client client.Client
}

func NewSquareClient(client client.Client) *squareClient {
	return &squareClient{client: client}
}

func (c *squareClient) GetSquare(ctx context.Context, key client.ObjectKey) (*Square, error) {
	obj := &Square{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *squareClient) ListSquare(ctx context.Context, opts ...client.ListOption) (*SquareList, error) {
	list := &SquareList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *squareClient) CreateSquare(ctx context.Context, obj *Square, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *squareClient) DeleteSquare(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Square{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *squareClient) UpdateSquare(ctx context.Context, obj *Square, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *squareClient) PatchSquare(ctx context.Context, obj *Square, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *squareClient) DeleteAllOfSquare(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Square{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *squareClient) UpdateSquareStatus(ctx context.Context, obj *Square, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *squareClient) PatchSquareStatus(ctx context.Context, obj *Square, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}
