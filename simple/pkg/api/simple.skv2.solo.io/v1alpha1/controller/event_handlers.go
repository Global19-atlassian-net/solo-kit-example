// Code generated by skv2. DO NOT EDIT.

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	simple_skv2_solo_io_v1alpha1 "github.com/solo-io/solo-kit-example/simple/pkg/api/simple.skv2.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the Circle Resource
// DEPRECATED: Prefer reconciler pattern.
type CircleEventHandler interface {
	CreateCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error
	UpdateCircle(old, new *simple_skv2_solo_io_v1alpha1.Circle) error
	DeleteCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error
	GenericCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error
}

type CircleEventHandlerFuncs struct {
	OnCreate  func(obj *simple_skv2_solo_io_v1alpha1.Circle) error
	OnUpdate  func(old, new *simple_skv2_solo_io_v1alpha1.Circle) error
	OnDelete  func(obj *simple_skv2_solo_io_v1alpha1.Circle) error
	OnGeneric func(obj *simple_skv2_solo_io_v1alpha1.Circle) error
}

func (f *CircleEventHandlerFuncs) CreateCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CircleEventHandlerFuncs) DeleteCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CircleEventHandlerFuncs) UpdateCircle(objOld, objNew *simple_skv2_solo_io_v1alpha1.Circle) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CircleEventHandlerFuncs) GenericCircle(obj *simple_skv2_solo_io_v1alpha1.Circle) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CircleEventWatcher interface {
	AddEventHandler(ctx context.Context, h CircleEventHandler, predicates ...predicate.Predicate) error
}

type circleEventWatcher struct {
	watcher events.EventWatcher
}

func NewCircleEventWatcher(name string, mgr manager.Manager) CircleEventWatcher {
	return &circleEventWatcher{
		watcher: events.NewWatcher(name, mgr, &simple_skv2_solo_io_v1alpha1.Circle{}),
	}
}

func (c *circleEventWatcher) AddEventHandler(ctx context.Context, h CircleEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCircleHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCircleHandler implements a generic events.EventHandler
type genericCircleHandler struct {
	handler CircleEventHandler
}

func (h genericCircleHandler) Create(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Circle)
	if !ok {
		return errors.Errorf("internal error: Circle handler received event for %T", object)
	}
	return h.handler.CreateCircle(obj)
}

func (h genericCircleHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Circle)
	if !ok {
		return errors.Errorf("internal error: Circle handler received event for %T", object)
	}
	return h.handler.DeleteCircle(obj)
}

func (h genericCircleHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*simple_skv2_solo_io_v1alpha1.Circle)
	if !ok {
		return errors.Errorf("internal error: Circle handler received event for %T", old)
	}
	objNew, ok := new.(*simple_skv2_solo_io_v1alpha1.Circle)
	if !ok {
		return errors.Errorf("internal error: Circle handler received event for %T", new)
	}
	return h.handler.UpdateCircle(objOld, objNew)
}

func (h genericCircleHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Circle)
	if !ok {
		return errors.Errorf("internal error: Circle handler received event for %T", object)
	}
	return h.handler.GenericCircle(obj)
}

// Handle events for the Square Resource
// DEPRECATED: Prefer reconciler pattern.
type SquareEventHandler interface {
	CreateSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error
	UpdateSquare(old, new *simple_skv2_solo_io_v1alpha1.Square) error
	DeleteSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error
	GenericSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error
}

type SquareEventHandlerFuncs struct {
	OnCreate  func(obj *simple_skv2_solo_io_v1alpha1.Square) error
	OnUpdate  func(old, new *simple_skv2_solo_io_v1alpha1.Square) error
	OnDelete  func(obj *simple_skv2_solo_io_v1alpha1.Square) error
	OnGeneric func(obj *simple_skv2_solo_io_v1alpha1.Square) error
}

func (f *SquareEventHandlerFuncs) CreateSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *SquareEventHandlerFuncs) DeleteSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *SquareEventHandlerFuncs) UpdateSquare(objOld, objNew *simple_skv2_solo_io_v1alpha1.Square) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *SquareEventHandlerFuncs) GenericSquare(obj *simple_skv2_solo_io_v1alpha1.Square) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type SquareEventWatcher interface {
	AddEventHandler(ctx context.Context, h SquareEventHandler, predicates ...predicate.Predicate) error
}

type squareEventWatcher struct {
	watcher events.EventWatcher
}

func NewSquareEventWatcher(name string, mgr manager.Manager) SquareEventWatcher {
	return &squareEventWatcher{
		watcher: events.NewWatcher(name, mgr, &simple_skv2_solo_io_v1alpha1.Square{}),
	}
}

func (c *squareEventWatcher) AddEventHandler(ctx context.Context, h SquareEventHandler, predicates ...predicate.Predicate) error {
	handler := genericSquareHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericSquareHandler implements a generic events.EventHandler
type genericSquareHandler struct {
	handler SquareEventHandler
}

func (h genericSquareHandler) Create(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Square)
	if !ok {
		return errors.Errorf("internal error: Square handler received event for %T", object)
	}
	return h.handler.CreateSquare(obj)
}

func (h genericSquareHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Square)
	if !ok {
		return errors.Errorf("internal error: Square handler received event for %T", object)
	}
	return h.handler.DeleteSquare(obj)
}

func (h genericSquareHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*simple_skv2_solo_io_v1alpha1.Square)
	if !ok {
		return errors.Errorf("internal error: Square handler received event for %T", old)
	}
	objNew, ok := new.(*simple_skv2_solo_io_v1alpha1.Square)
	if !ok {
		return errors.Errorf("internal error: Square handler received event for %T", new)
	}
	return h.handler.UpdateSquare(objOld, objNew)
}

func (h genericSquareHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*simple_skv2_solo_io_v1alpha1.Square)
	if !ok {
		return errors.Errorf("internal error: Square handler received event for %T", object)
	}
	return h.handler.GenericSquare(obj)
}
